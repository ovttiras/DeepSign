import streamlit as st
import cv2
import numpy as np
import tensorflow as tf
import tempfile
import os
from PIL import Image
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="DeepSign - –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–µ–π",
    page_icon="üí≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ê–ü–ë */
    :root {
        --apb-green: #2E7D32;
        --apb-dark-green: #1B5E20;
        --apb-light-green: #4CAF50;
        --apb-gold: #FFC107;
        --apb-white: #FFFFFF;
        --apb-gray: #F5F5F5;
        --apb-dark-gray: #424242;
    }
    
    /* –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
    .main-header {
        background: linear-gradient(135deg, var(--apb-green) 0%, var(--apb-dark-green) 100%);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        margin: 0;
        font-weight: bold;
    }
    
    .main-header p {
        font-size: 1.2rem;
        margin: 0.5rem 0 0 0;
        opacity: 0.9;
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
    .card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid var(--apb-green);
    }
    
    .card h3 {
        color: var(--apb-green);
        margin-top: 0;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: linear-gradient(135deg, var(--apb-green) 0%, var(--apb-dark-green) 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: bold;
        transition: all 0.3s ease;
        width: 100%;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    /* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */
    .result-genuine {
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 1rem 0;
    }
    
    .result-forged {
        background: linear-gradient(135deg, #F44336, #D32F2F);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 1rem 0;
    }
    
    /* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */
    .upload-section {
        background: var(--apb-gray);
        padding: 2rem;
        border-radius: 10px;
        border: 2px dashed var(--apb-green);
        text-align: center;
    }
    
    /* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
    .stats-container {
        display: flex;
        justify-content: space-around;
        margin: 1rem 0;
    }
    
    .stat-item {
        text-align: center;
        padding: 1rem;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: var(--apb-green);
    }
    
    .stat-label {
        color: var(--apb-dark-gray);
        font-size: 0.9rem;
    }
    
    /* –°–∞–π–¥–±–∞—Ä */
    .sidebar .sidebar-content {
        background: var(--apb-gray);
    }
    
    /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, var(--apb-green), var(--apb-light-green));
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("""
<div class="main-header">
    <h1>üí≥ DeepSign</h1>
    <p>–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–µ–π</p>
</div>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ TensorFlow Lite
@st.cache_resource
def load_signature_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å TensorFlow Lite –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç TensorFlow Lite)
        model_files = [
            'model.tflite',
            'signature_verification_model_fixed.h5',
            'signature_verification_model.h5'
        ]
        
        model_path = None
        model_type = None
        
        for file in model_files:
            if os.path.exists(file):
                model_path = file
                if file.endswith('.tflite'):
                    model_type = "TensorFlow Lite –º–æ–¥–µ–ª—å"
                elif "fixed" in file:
                    model_type = "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è H5 –º–æ–¥–µ–ª—å"
                else:
                    model_type = "–ë–∞–∑–æ–≤–∞—è H5 –º–æ–¥–µ–ª—å"
                break
        
        if model_path is None:
            st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å...")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
            from tensorflow.keras.models import Sequential
            from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
            
            model = Sequential([
                Conv2D(32, (3, 3), activation='relu', input_shape=(155, 220, 1)),
                MaxPooling2D(2, 2),
                Conv2D(64, (3, 3), activation='relu'),
                MaxPooling2D(2, 2),
                Flatten(),
                Dense(128, activation='relu'),
                Dropout(0.5),
                Dense(1, activation='sigmoid')
            ])
            
            model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
            return model, "–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å (–Ω–µ –æ–±—É—á–µ–Ω–∞)", "keras"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if model_path.endswith('.tflite'):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º TensorFlow Lite –º–æ–¥–µ–ª—å
            interpreter = tf.lite.Interpreter(model_path=model_path)
            interpreter.allocate_tensors()
            return interpreter, model_type, "tflite"
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º H5 –º–æ–¥–µ–ª—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            from tensorflow.keras.models import load_model
            model = load_model(model_path)
            return model, model_type, "keras"
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å Signature_Verification.ipynb –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
        return None, None, None

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess_image(image):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ numpy array
        img_array = np.array(image)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(img_array.shape) == 3:
            img_array = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        img_array = cv2.resize(img_array, (220, 155))
        
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        _, img_array = cv2.threshold(img_array, 127, 255, cv2.THRESH_BINARY_INV)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        img_array = img_array / 255.0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        img_array = img_array.reshape(1, 155, 220, 1)
        
        return img_array
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict_signature(model, image, model_format="keras"):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∏"""
    try:
        if model_format == "tflite":
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è TensorFlow Lite –º–æ–¥–µ–ª–∏
            input_details = model.get_input_details()
            output_details = model.get_output_details()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            model.set_tensor(input_details[0]['index'], image.astype(np.float32))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
            model.invoke()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            prediction = model.get_tensor(output_details[0]['index'])
            confidence = prediction[0][0]
        else:
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è Keras –º–æ–¥–µ–ª–∏
            prediction = model.predict(image, verbose=0)
            confidence = prediction[0][0]
        
        if confidence >= 0.5:
            return "–ù–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥–ø–∏—Å—å", confidence, "genuine"
        else:
            return "–ü–æ–¥–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", 1 - confidence, "forged"
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
        return None, None, None

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model, model_type, model_format = load_signature_model()

if model is not None:
    st.success(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_type}")
    if model_format == "tflite":
        st.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è TensorFlow Lite –º–æ–¥–µ–ª—å")
    
    # –°–∞–π–¥–±–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        st.markdown(f"**–¢–∏–ø –º–æ–¥–µ–ª–∏:** {model_type}")
        st.markdown("**–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ:** 99.9%")
        st.markdown("**–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ:** 79%")
        st.markdown("**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** < 1 —Å–µ–∫")
        
        st.markdown("### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        confidence_threshold = st.slider(
            "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 
            min_value=0.1, 
            max_value=0.9, 
            value=0.5, 
            step=0.1,
            help="–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )
        
        st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", "0", "0")
        with col2:
            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å (—Ç–µ—Å—Ç)", "79%", "0.1%")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üìã –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–ø–∏—Å—è–º–∏")
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        example_files = [
            ("example/original signature_1.png", "–ù–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥–ø–∏—Å—å 1"),
            ("example/original signature_2.png", "–ù–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥–ø–∏—Å—å 2"),
            ("example/fake signature_1.png", "–ü–æ–¥–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å 1"),
            ("example/fake signature_2.png", "–ü–æ–¥–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å 2")
        ]
        
        for file_path, description in example_files:
            if os.path.exists(file_path):
                st.markdown(f"‚Ä¢ **{description}:** `{file_path}`")
            else:
                st.markdown(f"‚Ä¢ **{description}:** `{file_path}` (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        st.markdown("---")
        st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∏")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏",
            type=['png', 'jpg', 'jpeg', 'bmp'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG, BMP"
        )
        
        if uploaded_file is not None:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = Image.open(uploaded_file)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å", type="primary"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å..."):
                    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                    processed_image = preprocess_image(image)
                    
                    if processed_image is not None:
                        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                        result, confidence, result_type = predict_signature(model, processed_image, model_format)
                        
                        if result is not None:
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            with col2:
                                st.markdown("### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                                
                                if result_type == "genuine":
                                    st.markdown(f"""
                                    <div class="result-genuine">
                                        <h2>‚úÖ {result}</h2>
                                        <p>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                else:
                                    st.markdown(f"""
                                    <div class="result-forged">
                                        <h2>‚ùå {result}</h2>
                                        <p>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                st.markdown("### üìã –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞")
                                st.write(f"**–¢–∏–ø –ø–æ–¥–ø–∏—Å–∏:** {result}")
                                st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.1%}")
                                st.write(f"**–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:** {confidence_threshold:.1%}")
                                
                                # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                                st.progress(float(confidence))
                                
                                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                                if result_type == "genuine":
                                    st.success("‚úÖ –ü–æ–¥–ø–∏—Å—å –ø—Ä–∏–∑–Ω–∞–Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
                                else:
                                    st.warning("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –ø—Ä–∏–∑–Ω–∞–Ω–∞ –ø–æ–¥–¥–µ–ª—å–Ω–æ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–µ–π")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="card">
            <h3>üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è</h3>
            <p>–ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–¥–ø–∏—Å–µ–π.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="card">
            <h3>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å</h3>
            <p>–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="card">
            <h3>üéØ –¢–æ—á–Ω–æ—Å—Ç—å</h3>
            <p>–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 79%, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∑–∞—â–∏—Ç—É –æ—Ç –ø–æ–¥–¥–µ–ª–æ–∫.</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    st.markdown("---")
    st.markdown("### üß† –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="card">
            <h3>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏</h3>
            <p><strong>–¢–∏–ø:</strong> –°–≤–µ—Ä—Ç–æ—á–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å (CNN)</p>
            <p><strong>–í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä:</strong> 220√ó155√ó1 (–≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ)</p>
            <p><strong>–°–ª–æ–∏:</strong></p>
            <ul>
                <li>Conv2D + MaxPooling (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)</li>
                <li>Dropout (—Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)</li>
                <li>Dense —Å–ª–æ–∏ (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)</li>
                <li>Sigmoid –∞–∫—Ç–∏–≤–∞—Ü–∏—è (–±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="card">
            <h3>üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö CEDAR-Dataset</h3>
            <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> CEDAR (Center of Excellence for Document Analysis and Recognition)</p>
            <p><strong>–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç:</strong> <a href="https://www.kaggle.com/datasets/shreelakshmigp/cedardataset/data" target="_blank">https://www.kaggle.com/datasets/shreelakshmigp/cedardataset/data</a></p>
            <p><strong>–†–∞–∑–º–µ—Ä:</strong> 55 –∞–≤—Ç–æ—Ä–æ–≤, 24 –ø–æ–¥–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ</p>
            <p><strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–µ–π:</strong> 2,640</p>
            <p><strong>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–≤—É–º—è –∫–ª–∞—Å—Å–∞–º–∏ - –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏</p>
            <p><strong>–§–æ—Ä–º–∞—Ç:</strong> –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞</p>
            <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–µ–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="card">
            <h3>üéØ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞</h3>
            <ul>
                <li>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 220√ó155</li>
                <li>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ</li>
                <li>–ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
                <li>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π [0,1]</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="card">
            <h3>‚öôÔ∏è –û–±—É—á–µ–Ω–∏–µ</h3>
            <ul>
                <li>–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: Adam</li>
                <li>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å: Binary Crossentropy</li>
                <li>–ú–µ—Ç—Ä–∏–∫–∏: Accuracy, Precision, Recall</li>
                <li>–í–∞–ª–∏–¥–∞—Ü–∏—è: 20% –æ—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="card">
            <h3>üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
            <ul>
                <li>–¢–æ—á–Ω–æ—Å—Ç—å (–æ–±—É—á–µ–Ω–∏–µ): 99.9%</li>
                <li>–¢–æ—á–Ω–æ—Å—Ç—å (—Ç–µ—Å—Ç): 79%</li>
                <li>–í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: < 1 —Å–µ–∫</li>
                <li>–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: ~2.5 –ú–ë</li>
                <li>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: TensorFlow/Keras</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 2rem;">
        <p>¬© 2025 DeepSign was developed by Oleg Tinkov - –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–µ–π</p>
        <p>–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
    </div>
    """, unsafe_allow_html=True)

else:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    
    st.markdown("### üìÅ –¢—Ä–µ–±—É–µ–º—ã–µ —Ñ–∞–π–ª—ã:")
    st.code("""
    model.tflite                        # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ (TensorFlow Lite)
    –∏–ª–∏
    signature_verification_model_fixed.h5  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (Keras)
    –∏–ª–∏
    signature_verification_model.h5      # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (Keras)
    """)

