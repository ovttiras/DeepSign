#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ H5 –º–æ–¥–µ–ª–∏ –≤ TensorFlow Lite —Ñ–æ—Ä–º–∞—Ç
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python convert_to_tflite.py
"""

import tensorflow as tf
import os

def convert_h5_to_tflite(h5_path, tflite_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç H5 –º–æ–¥–µ–ª—å –≤ TensorFlow Lite —Ñ–æ—Ä–º–∞—Ç"""
    try:
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ {h5_path}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º H5 –º–æ–¥–µ–ª—å
        model = tf.keras.models.load_model(h5_path)
        
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
        model.summary()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        converter = tf.lite.TFLiteConverter.from_keras_model(model)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TensorFlow Lite...")
        tflite_model = converter.convert()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(tflite_path, 'wb') as f:
            f.write(tflite_model)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        h5_size = os.path.getsize(h5_path) / (1024 * 1024)  # MB
        tflite_size = os.path.getsize(tflite_path) / (1024 * 1024)  # MB
        
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ H5 –º–æ–¥–µ–ª—å: {h5_size:.2f} MB")
        print(f"üìÅ TFLite –º–æ–¥–µ–ª—å: {tflite_size:.2f} MB")
        print(f"üìâ –°–∂–∞—Ç–∏–µ: {((h5_size - tflite_size) / h5_size * 100):.1f}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä H5 ‚Üí TensorFlow Lite")
    print("=" * 50)
    
    # –ò—â–µ–º H5 –º–æ–¥–µ–ª–∏
    h5_files = [
        'signature_verification_model_fixed.h5',
        'signature_verification_model.h5'
    ]
    
    found_models = []
    for file in h5_files:
        if os.path.exists(file):
            found_models.append(file)
    
    if not found_models:
        print("‚ùå H5 –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in os.listdir('.'):
            if file.endswith('.h5'):
                print(f"  - {file}")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ H5 –º–æ–¥–µ–ª–µ–π: {len(found_models)}")
    for i, model in enumerate(found_models, 1):
        print(f"  {i}. {model}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    for h5_file in found_models:
        print(f"\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {h5_file}...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è TFLite —Ñ–∞–π–ª–∞
        tflite_file = h5_file.replace('.h5', '.tflite')
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å TFLite –≤–µ—Ä—Å–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        if os.path.exists(tflite_file):
            response = input(f"‚ö†Ô∏è  {tflite_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ")
            if response.lower() != 'y':
                print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        success = convert_h5_to_tflite(h5_file, tflite_file)
        
        if success:
            print(f"‚úÖ {h5_file} ‚Üí {tflite_file}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {h5_file}")
    
    print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ TFLite –º–æ–¥–µ–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
    print("3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç–µ H5 —Ñ–∞–π–ª—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞")

if __name__ == "__main__":
    main()
